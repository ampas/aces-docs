{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"glossary/","text":"Terms and Definitions \u00b6 A \u00b6 Academy Color Encoding Specification ( ACES ) RGB color encoding for exchange of image data that have not been color rendered, between and throughout production and postproduction, within the Academy Color Encoding System. ACES is specified in SMPTE ST 2065-1. ACES RGB relative exposure values Relative responses to light of the ACES Reference Image Capture Device, determined by the integrated spectral responsivities of its color channels and the spectral radiances of scene stimuli. ACES unity neutral A triplet of ACES RGB relative exposure values all of which have unity magnitude. ACES Metadata File ( AMF ) Metadata \u201csidecar\u201d XML -based file that contains information describing a collection of image files color-managed using the Academy Color Encoding System ( ACES ). ACES Encodings Color encoding specifications specified as part of the Academy Color Encoding System, e.g., ACES2065-1, ACEScc, etc. ACES File Formats Digital data containers specified as part of the Academy Color Encoding System, e.g., ACES Metadata Files, ACES Image Container ( SMPTE ST2065-4), etc. ACES Product Partners Companies that integrate ACES concepts and components into their products and/or services. ACES System Complete set of components that comprise the Academy Color Encoding System. ACES System Release Published ACES System. ACES Transforms Color transformations specified as part of the Academy Color Encoding System, e.g., Reference Rendering Transform ( RRT ), Output Device Transforms ( ODT ), etc. ACES Viewing Transform Combined RRT and ACES Output Device Transform. B \u00b6 C \u00b6 chromatic adaptation process by which the visual mechanism adjusts in response to the radiant energy to which the eyes are exposed. chromaticity property of a color stimulus defined by the ratios of each tristimulus value of the color stimulus to their sum. Color Transform Langage ( CTL ) small open-source programming language, consisting of an interpreter and one or more CLT modules, that has been designed to serve as a building block for digital color management systems. CTL modules (files) files containing Color Transformation Language code. Note: CTL files are the primary documentation for ACES transforms. D \u00b6 DateTime (reference: ISO 8601:2004 ) timestamp format The DateTime is specified in the following form YYYY-MM-DDThh:mm:ss{offset} where: YYYY indicates the year MM indicates the month DD indicates the day T indicates the start of the required time section hh indicates the hour mm indicates the minute ss indicates the second {offset} time zone offset from UTC NOTE: All components are required. Example: 2014-11-20T12:24:13-8:00 E \u00b6 Edit Decision List ( EDL ) list used in the post-production process of film editing and video editing containing an ordered sequence of reel and timecode data representing where each video clip can be obtained in order to conform to the final cut. Extensible Markup Language ( XML ) a markup language and file format for storing, transmitting, and reconstructing arbitrary data. It defines a set of rules for encoding documents in a format that is both human-readable and machine-readable F \u00b6 G \u00b6 H \u00b6 I \u00b6 Implementation Transforms ACES System transforms implemented by ACES Product Partners, likely as a Color Look-up Table or as GPU or CPU code. Internet Engineering Task Force ( IETF ) an open standards organization, which develops and promotes voluntary Internet standards, in particular the technical standards that comprise the Internet protocol suite (TCP/IP). J \u00b6 K \u00b6 L \u00b6 Look (Modification) Transform ( LMT ) ACES transform which applies a global look or other modification to scene-referred image data. M \u00b6 N \u00b6 O \u00b6 P \u00b6 Q \u00b6 R \u00b6 Reference Gamut Compression ( RGC ) ACES LMT which compresses scene-referred image data to within the AP1 gamut. Reference Rendering Transform ( RRT ) Core ACES transform that converts scene-referred image data that conforms to SMPTE ST 2065-1:2012 to output-referred image data. RFN technical specification or organizational note published by the Internet Engineering Task Force ( IETF ) S \u00b6 T \u00b6 Transform Identifiers string identifying the ACES transform. Note: Please see the ACES System Versioning Specification for more information on the format to use for TransformIDs. U \u00b6 Universal(ly) Unique Identifier ( UUID ) 128-bit label used for information in computer systems published in various standards including ISO /IEC 11578:1996 \"Information technology \u2013 Open Systems Interconnection \u2013 Remote Procedure Call (RPC)\" V \u00b6 W \u00b6 X \u00b6 Y \u00b6 Z \u00b6","title":"Glossary"},{"location":"glossary/#terms-and-definitions","text":"","title":"Terms and Definitions"},{"location":"glossary/#a","text":"Academy Color Encoding Specification ( ACES ) RGB color encoding for exchange of image data that have not been color rendered, between and throughout production and postproduction, within the Academy Color Encoding System. ACES is specified in SMPTE ST 2065-1. ACES RGB relative exposure values Relative responses to light of the ACES Reference Image Capture Device, determined by the integrated spectral responsivities of its color channels and the spectral radiances of scene stimuli. ACES unity neutral A triplet of ACES RGB relative exposure values all of which have unity magnitude. ACES Metadata File ( AMF ) Metadata \u201csidecar\u201d XML -based file that contains information describing a collection of image files color-managed using the Academy Color Encoding System ( ACES ). ACES Encodings Color encoding specifications specified as part of the Academy Color Encoding System, e.g., ACES2065-1, ACEScc, etc. ACES File Formats Digital data containers specified as part of the Academy Color Encoding System, e.g., ACES Metadata Files, ACES Image Container ( SMPTE ST2065-4), etc. ACES Product Partners Companies that integrate ACES concepts and components into their products and/or services. ACES System Complete set of components that comprise the Academy Color Encoding System. ACES System Release Published ACES System. ACES Transforms Color transformations specified as part of the Academy Color Encoding System, e.g., Reference Rendering Transform ( RRT ), Output Device Transforms ( ODT ), etc. ACES Viewing Transform Combined RRT and ACES Output Device Transform.","title":"A"},{"location":"glossary/#b","text":"","title":"B"},{"location":"glossary/#c","text":"chromatic adaptation process by which the visual mechanism adjusts in response to the radiant energy to which the eyes are exposed. chromaticity property of a color stimulus defined by the ratios of each tristimulus value of the color stimulus to their sum. Color Transform Langage ( CTL ) small open-source programming language, consisting of an interpreter and one or more CLT modules, that has been designed to serve as a building block for digital color management systems. CTL modules (files) files containing Color Transformation Language code. Note: CTL files are the primary documentation for ACES transforms.","title":"C"},{"location":"glossary/#d","text":"DateTime (reference: ISO 8601:2004 ) timestamp format The DateTime is specified in the following form YYYY-MM-DDThh:mm:ss{offset} where: YYYY indicates the year MM indicates the month DD indicates the day T indicates the start of the required time section hh indicates the hour mm indicates the minute ss indicates the second {offset} time zone offset from UTC NOTE: All components are required. Example: 2014-11-20T12:24:13-8:00","title":"D"},{"location":"glossary/#e","text":"Edit Decision List ( EDL ) list used in the post-production process of film editing and video editing containing an ordered sequence of reel and timecode data representing where each video clip can be obtained in order to conform to the final cut. Extensible Markup Language ( XML ) a markup language and file format for storing, transmitting, and reconstructing arbitrary data. It defines a set of rules for encoding documents in a format that is both human-readable and machine-readable","title":"E"},{"location":"glossary/#f","text":"","title":"F"},{"location":"glossary/#g","text":"","title":"G"},{"location":"glossary/#h","text":"","title":"H"},{"location":"glossary/#i","text":"Implementation Transforms ACES System transforms implemented by ACES Product Partners, likely as a Color Look-up Table or as GPU or CPU code. Internet Engineering Task Force ( IETF ) an open standards organization, which develops and promotes voluntary Internet standards, in particular the technical standards that comprise the Internet protocol suite (TCP/IP).","title":"I"},{"location":"glossary/#j","text":"","title":"J"},{"location":"glossary/#k","text":"","title":"K"},{"location":"glossary/#l","text":"Look (Modification) Transform ( LMT ) ACES transform which applies a global look or other modification to scene-referred image data.","title":"L"},{"location":"glossary/#m","text":"","title":"M"},{"location":"glossary/#n","text":"","title":"N"},{"location":"glossary/#o","text":"","title":"O"},{"location":"glossary/#p","text":"","title":"P"},{"location":"glossary/#q","text":"","title":"Q"},{"location":"glossary/#r","text":"Reference Gamut Compression ( RGC ) ACES LMT which compresses scene-referred image data to within the AP1 gamut. Reference Rendering Transform ( RRT ) Core ACES transform that converts scene-referred image data that conforms to SMPTE ST 2065-1:2012 to output-referred image data. RFN technical specification or organizational note published by the Internet Engineering Task Force ( IETF )","title":"R"},{"location":"glossary/#s","text":"","title":"S"},{"location":"glossary/#t","text":"Transform Identifiers string identifying the ACES transform. Note: Please see the ACES System Versioning Specification for more information on the format to use for TransformIDs.","title":"T"},{"location":"glossary/#u","text":"Universal(ly) Unique Identifier ( UUID ) 128-bit label used for information in computer systems published in various standards including ISO /IEC 11578:1996 \"Information technology \u2013 Open Systems Interconnection \u2013 Remote Procedure Call (RPC)\"","title":"U"},{"location":"glossary/#v","text":"","title":"V"},{"location":"glossary/#w","text":"","title":"W"},{"location":"glossary/#x","text":"","title":"X"},{"location":"glossary/#y","text":"","title":"Y"},{"location":"glossary/#z","text":"","title":"Z"},{"location":"guides/amf/","text":"ACES Metadata File Implementation Guidelines and Best Practices \u00b6 Scope \u00b6 This document is a guide that recommends implementation guidelines and best practices related to the usage of the ACES Metadata File ( AMF ) in various workflows. These workflows may involve one or more tools that support the AMF specification and this guide attempts to help both implementers and users in order to facilitate interoperability. References \u00b6 The following standards, specifications, articles, presentations, and texts are referenced in this text: Academy S-2019-001, ACES Metadata File ( AMF ) IETF RFC 4122, A Universally Unique IDentifier ( UUID ) URN Namespace Introduction \u00b6 The Academy Color Encoding System ( ACES ) is a color processing framework that enables the mix of various sources within a standardized color space in order to produce one or more outputs. While ACES is a living framework and is actively developed and adopted, it also comes with various points that can be configured. These points of configuration are either related to the sources used (Input Transforms), a creative look (Look Transforms), the desired outputs (Output Transforms), or the Version Number (i.e. ACES v1.1) of the core transforms built into the ACES system. ACES does not specify these configuration points directly or associate them with actual images or shots during production, and this is the very reason why AMF exists. AMF is the configuration file that allows a precise setup for an ACES pipeline. Besides this basic goal, AMF is also the tool of choice to transmit and exchange configuration parameters in order to ensure consistency within a workflow and across the entire ecosystem of tools that are used within that workflow. Target Audience \u00b6 AMF is a sidecar file specified using the XML markup language, and as such it can be processed by machines and at the same time created/modified by users. This document targets both AMF users and AMF implementers because both groups need the same level of understanding in order to design AMF -enabled workflows and tools that support those workflows. What is AMF \u00b6 AMF is an XML specification that describes the configuration of an ACES color pipeline, together with the various input transforms, look transforms and output transforms. AMF is a \"sidecar\" element, usually accompanying some visual material such as a video file, a sequence of frames, or a whole timeline. In the case of a timeline, more than one AMF file can be used if the timeline requires different configurations of the ACES pipeline. It is also worth mentioning that several AMF files can reference the same visual material. The opposite is equally true as all these visual elements can share a single AMF file or a whole set of them. This of course is entirely dependent on the workflow, and tools implementing AMF should be prepared to deal with this flexibility. In general, the relationship between the visual elements and the AMF files can be described as a \"many to many\" relationship. Why is AMF needed \u00b6 The ACES framework is expanding and becoming richer in terms of input, look, and output transforms. AMF describes the exact list of these different transforms, in the order in which they have been or should be applied to obtain the desired result. graph LR A1[Input Media] --> B(Input Transform) subgraph AMF Complete Processing Path Description B --> C1(Look Transform) C1 --> D1(Output Transform) end A2[ACES Material] ---> C2(Look Transform) subgraph AMF Partial Processing Path Description C2 --> D2(Output Transform) end AMF Processing Path Description This is a powerful feature because it can describe both configurations that must be used to create a specific output, or configurations that have been used to create a specific output. graph TB B1 --> A1(AMF Look Modification Transform Chain) B2 --> A1 B3 --> A1 subgraph B1(\"ASC-CDL or External LMT (active)\") B2(\"ASC-CDL or External LMT (disabled)\") B3(\"ASC-CDL or External LMT (active)\") end classDef disabled opacity: 0.5 class B2 disabled Each block in the chain can be an ASC-CDL or an external LUT. Blocks can be enabled or disabled Finally, another feature of AMF is the ability to document a \"change log\" in an ACES color pipeline. This is called the \"archived pipeline\" and will be discussed later in the document. The \u201capplied\u201d attribute \u00b6 Each transform in an AMF can be tagged with the attribute called applied - which indicates whether a transform has already been applied ( applied=true ), in which case the transform has already been baked into the image, or if the transform has not been applied ( applied=false ), in which case the transform should be loaded as part of the viewing pipeline. One use case of this might be when using the ACES Gamut Compression transform, which may be baked into SMPTE ST 2065-1 ACES image data, and it is essential to communicate to downstream software that it has already been applied, as to not double-apply the transform, or invert it if necessary. Lifecycle of AMF \u00b6 This section describes the life cycle of an AMF and how it could be used within each production stage. Camera \u00b6 While on set, AMF could be imported in-camera and used to apply color pipeline settings for video and file output, or exported to a camera card when using a camera\u2019s ACES viewing pipeline. See section 7 for more on cameras reading/writing AMF . Monitor \u00b6 Some professional monitors allow import of LUTs to apply looks in-device. AMF could replace proprietary or uncommon LUT formats for improved interoperability. On-set live grading \u00b6 An AMF may be read by on-set live grading software for the purpose of on-set monitoring and color grading within ACES . If anything is altered within the domain of the pipeline defined in the AMF , a new AMF is created to reflect those modifications. For example, an ACES pipeline is established in an AMF before production, then CDL adjustments are created during production to create an updated AMF accordingly. Dailies \u00b6 In a dailies tool, a pre-created AMF could be read and associated with OCF (Original Camera Files) to apply pipeline settings (for viewing and rendering). This could be done either by manual association or automatically. In the process of creating the dailies, the color pipeline coming from an existing AMF may be modified and updated. AMFs are written out with media to be passed to editorial software. Commonly used interchange files (e.g. EDL or ALE ) can be used to conform AMF files with OCF , see below for more details. Editorial \u00b6 Editorial software can apply pipeline settings provided by AMF (s) when importing media to automatically set up viewing and rendering. VFX \u00b6 Read AMF (s) when importing plates into VFX software and apply pipeline settings for viewing. Given the prevalence of OpenColorIO across VFX software, it is likely that a translation from AMF to OpenColorIO ( OCIO ) would be required. Color Grading \u00b6 When in color grading, AMF could be conformed to a timeline and associated with OCF to apply pipeline settings (for viewing and rendering). These applications should also allow for look development in ACES and subsequent exporting of AMF . Review \u00b6 Review software could automatically apply ACES pipeline settings for viewing purposes by reading AMF (s) when importing media or by manually applying AMF (s) to imported media. Mastering and Archiving \u00b6 Read AMF (s) when importing media and apply pipeline settings for viewing. Consolidate AMF (s) to meet specific archival delivery requirements. Considerations on reading/writing AMF \u00b6 This section outlines various scenarios related to the reading and writing of AMF files. Scenario Read - An AMF is read when importing media and used to populate a color pipeline for viewing and rendering. Write - A new AMF is written in order to be passed along to the next production stage. If a new AMF is done from a previous AMF , the previous pipeline might be archived in the section. RAW Clips AMF does not include any metadata for demosaic settings. Implementations need to ensure that the image is demosaicked to the appropriate color space before the Input Transform defined in the AMF is applied. User input may be required. If software chooses to directly demosaic a RAW image to ACES , the Input Transform defined in the AMF must be ignored. n/a Input Transform Conflict A clip has already been loaded into the software, and an Input Transform is already applied. Default behaviour should be to override that Input Transform with what\u2019s specified in the AMF , but the user should be prompted. n/a Output Transform Conflict If the AMF specifies an Output Transform that is in conflict with the respective shot\u2019s Output Transform, then this conflict must be handled. The default behaviour should be to stick with the project-wide Output Transform, but it may be useful to indicate a conflict to the user. Example: An AMF is generated from a software platform that uses the Rec709_100nits transform, and is then read by a software platform that is using an HDR Output Transform. The Output Transform that was indeed used for viewing should be specified in the AMF . Manual AMF Batch Import/Export Consider the use of commonly used interchange files (e.g. EDL or ALE ) to batch import AMF \u2019s to a timeline. Ideally, the software would allow for a partial import of only the Input, Look, or Output Transforms of a given AMF . When exporting a batch of AMF \u2019s for an entire timeline, consider exporting commonly used interchange files (e.g. EDL or ALE ) to create an association between Clips and the exported AMF files. Inter- AMF Output Transform Conflict If AMF \u2019s are batch imported into a single timeline, and at least two of them have different Output Transforms defined, consider prompting the user if this inconsistency exists, and provide appropriate options to address. This has the assumption that the user will only be using one Output Transform at a time for an entire timeline. n/a Pipeline Override If an AMF has already been applied to a shot, or if project/timeline settings apply, and a subsequent AMF is read for that shot, consider prompting the user before overriding pipeline. Ideally, the software would allow for a partial import of only the Input, Look, or Output Transforms of a given AMF . Consider including multiple AMF transform pipelines by making use of AMF \u2019s aces:archivedPipeline element. Updating Look Transforms n/a Local changes to transforms in the AMF should not affect any other transforms if the pipeline structure doesn\u2019t change, e.g. when only updating CDL values, but none of the other transforms change, the AMF structure should not be changed and only the CDL values should be updated. Any changes to the transform pipeline will result in a new AMF and global values, e.g. the dateTime element, are therefore expected to change. If CLF (s) are used in the pipeline, consider using CLF UUID and/or its hash to make sure that the CLF has not changed. Look Transform Support If an AMF references a Look Transform with a format that the application does not support reading, consider notifying the user that the format is unsupported, so it is clear the error is unrelated to the AMF itself. When producing a new Look Transform for an AMF export, consider defaulting to CLF , a format that ensures high interoperability,, especially for any operations other than ASC CDL . It\u2019s important to consider what to do when using CDL operations vs other grading operations and how these should be reflected in the AMF document: in elaborated pipeline where CDL are \u201cin between\u201d other more sophisticated grading operations, it might be required to let the user identify and decide over what CDL operations should be treated as such and which ones can be baked with other operations into a consolidated CLF Cameras Import AMF in-camera and apply pipeline settings for video and file output. An AMF loaded in camera could specify over SDI how to treat the incoming signal (ie Output Transform) There are reasonable expectations that any in-camera processing, for the foreseeable future, will be done utilizing small 3D LUTs at the highest complexity. Therefore, applications of an ACES pipeline in-camera may be limited in precision. When should a camera generate an AMF ? If a camera generates an AMF , where should it be written? #1 Preferred Method: Embedded in the OCF , e.g.REDCODE RAW R3D #2 Preferred Method: AMF should live in the same directory as its associated clip #3 Preferred Method: * A single folder with all AMF files Metadata Population Parse the AMF for its filename and aces:uuid and write these to the appropriate metadata fields for each clip. If the AMF associated with a clip changes, the value relative to the AMF metadata fields within the editorial software should change and adopt the new values. So when writing commonly used interchange files (e.g. EDL or ALE ) the correspondent values are correct. Applied Tag When reading an AMF file that has the applied=true attribute for a specific transform, the software should NOT apply the transform to the file, since it has already been applied to the image itself. Consider reporting it to the user if applicable (e.g. a \u201chistory\u201d log of the transforms is accessible for each clip) When exporting AMF \u2019s from a timeline of clips that have not been rendered yet, each transform in the AMF should be tagged as applied=false . However, when rendering new files, consider having the ability to export new AMF \u2019s files simultaneously as part of the same deliverable and, in this case, each transform that is actually baked in should be tagged as applied=true in the AMF (e.g. the Input Transform if rendering OpenEXR ACES 2065-1 VFX pulls, or everything when exporting 709 proxies for editorial). Archived Pipelines Consider allowing the user to toggle between different ACES pipelines that are recorded in the aces:archivedPipeline element. Otherwise, aces:archivedPipeline elements should be preserved for any new AMF \u2019s subsequently created for the same shots. If the software is updating a pre-existing AMF , the written AMF should include the appropriate aces:archivedPipeline element. Structure of AMF \u00b6 AMF is a specification based on the XML markup language. It is fully described in Academy Specification S-2019-001 . The specification also comes with an XML Schema that can be used to validate the AMF documents. The XML Schema is publicly available here: https://github.com/ampas/aces-dev/tree/master/formats/amf The guidelines and best practices in this document are provided to help both implementers and users to take full advantage of AMF . It is strongly recommended to use the specification as a reference in order to better understand the concepts described here. AMF document sections \u00b6 AMF documents are mainly divided in 3 sections: aces:amfInfo - this section provides descriptive information about the AMF itself. aces:clipId - this section provides a reference to the visual material ( OCF or rendered images) that this AMF is applicable for. aces:pipeline - this section describes the ACES pipeline configuration. General descriptive information \u00b6 The aces:amfInfo element contains various sub-elements that provide descriptive information about the AMF document but also a mechanism to help identification. More specifically two sub-elements deserve some consideration: aces:dateTime aces:uuid The mandatory aces:dateTime element contains the creation and modification date. The aces:uuid element is optional and is designed to carry a Universally Unique Identifier (also known as Globally Unique Identifier, or GUID on some systems). The Universally Unique Identifier is specified in IETF RFC 4122 as well as other ISO and ITU documents. Both aces:dateTime and aces:uuid elements are not filled in by a human operator but rather automatically generated by the tool used to create the AMF document. AMF naming and identification \u00b6 In general, the most common method that everyone uses to distinguish between two files is by comparing file names and/or their creation and/or modification date in the file system. However, this method quickly reveals itself ineffective when files are exchanged between various computers and operating systems because these file properties can easily be changed without any sort of warning. As explained above, AMF files usually come in large numbers and are moved across various systems and processed by various tools during their life cycle. Because of this situation, a better approach is to make good use of the information contained in the document itself. However, to avoid common pitfalls like overwriting files, the following file naming convention is recommended: AMF files should conform to the following file naming convention: <description>_<date>_<time>.amf <description> should describe the following, if applicable: Purpose: the use case of the AMF file (eg. \u201cdailies\u201d, \u201cSDR_709\u201d, \u201c VFX -Pull\u201d) Clip: Clip ID as in the AMF specification Show Name: Title or other identifiers of the associated show Author: Author of the AMF <date> is the date of creation, using the format YYYY-MM-DD <time> is the time of creation, using the format HHMMSSZ (trailing \u201cZ\u201d indicating \u201cZulu\u201d time, see below) Values for <date> and <time> are determined at the start of the operation that results in the creation of the AMF file and the values are represented using the Coordinated Universal Time ( UTC ) standard. Example: Dailies_ShowName_A002R2EC_2019-01-07_080228Z.amf Using date and time mechanism \u00b6 As mentioned above, the aces:dateTime is a mandatory element and it is defined using the standard XML type xs:dateTime. Because this definition is very flexible, it is strongly recommended for the tools to always use the most explicit form that includes the year, month and day, the time of the day in hours, minutes and seconds as well as the time zone. This practice ensures that the creation and modification dates and times are giving a good indication on the location where the document was created/modified. Using the unique identifier mechanism \u00b6 A more elaborate identification mechanism can also be used, by taking advantage of the aces:uuid element. Since this element is optional, one cannot count on its presence, however it is strongly recommended to use it. When doing so, the UUID becomes a much safer tool to distinguish between to AMF documents. UUIDs are automatically generated and they shall never be hand-crafted. Combining several identification mechanisms \u00b6 In order to improve the identification mechanism, one can combine both the UUID checks and creation/modification times. This might be helpful if two AMF documents contain the same UUID but have different creation/modification dates. In practice, when using dedicated tools to create and manage AMF files, such situations should not occur, but AMF files can still be manually altered. If this is the case, further inspection of the AMF documents can help to distinguish them. Such advanced methods will be discussed later in the document. It is worth mentioning here that there are situations where two or more AMF documents can have the same unique identifier but have different creation dates and time. It is then recommended that tools encountering this situation switch to the most recent version of the AMF document based on the date and time. Informing the user and logging conflicts \u00b6 Because of the large number of AMF documents involved in a workflow, it might not be practical to inform the user of every error encountered. However these errors should be logged by the tools using AMF and options should be offered to select the various identification rules, e.g. unique identifier first (if available), then the creation date and time. Clip information and association \u00b6 As described in the previous sections, AMF can be used with different targets, i.e. single file video clips, image sequences, compositions, etc. This flexibility implies that the AMF specification does not prescribe a specific way to create the connection with the target material. Instead, the specification offers different connection mechanisms via the aces:clipId, an optional structure that in turn contains child elements to help with the handling of the various situations. The first important observation to make is that the aces:clipId element itself is defined as optional. In this context, optional does not mean that the presence or absence of the aces:clipId element does not affect the workflow and how tools that support AMF behave. The term optional must be understood as a switch between two categories of workflow: the first does not connect an AMF file to a specific visual material and the second does connect an AMF file to a specific visual material. Depending on the workflow in use, an implementation must handle the presence or absence correctly and report errors if necessary. Typically, the XML validation only will not be enough to distinguish between a valid AMF file and an invalid one, since the aces:clipId element is optional. In other words, the aces:clipId does not dictate how the AMF document is handled. It is the workflow that dictates the behavior. aces:clipId is not present \u00b6 The absence of the aces:clipId element is important when the connection between the AMF document and the visual material is handled by a higher level protocol. The simplest higher level protocol that comes immediately to mind is the use of the file system and some sort of naming convention. For instance, a folder can contain a video clip and the related AMF file like this: ./myVideoClip.mxf ./myVideoClip.amf In this simple situation, an implementation that can read the the myVideoClip file could also look for a secondary file named myVideoClip.amf and if it is present and if it is a valid AMF document consider that there is a \"connection\" between the two files and act accordingly. While this seems to be a natural thing to do, it is certainly something to avoid. First of all, this kind of \"connection\" would work in a limited number of situations and then it would also prevent more elaborated workflows from existing. Consider the following modified example: ./myVideoClip.mxf ./myVideoClip.mov ./myVideoClip.amf In this variant, it's impossible to guess if myVideoClip.amf is related to myVideoClip.mxf or to myVideoClip.mov or to both files. To solve this problem, the aces:clipId element must be used to establish the desired connection between the AMF document and the correct targeted visual material. A single AMF document can be \"shared\" by multiple video clips or image sequences or even compositions. While it's certainly possible to invent a solution based on the file system naming capabilities via a fixed folder/file structure and naming convention, it is not recommended. In practice, workflows that involve multiple visual material elements, and one or more AMF documents, shared or not, make use of a control file that acts like a database, describing the complex relationships that may exist. This handbook defines the use of AMF in conjunction with some popular commonly used interchange files: Avid Log Exchange ( ALE ) CMX3600 Edit Decision List ( EDL ) The AMF Implementation Group explored the use of AMF with higher level protocols as well and those will eventually be described in a future version of this handbook. A future version may also describe the use of AMF with OpenTimelineIO. aces:clipId is present \u00b6 As briefly described before, the aces:clipId is a complex element, containing the following sub-elements: aces:clipName and one of the following: aces:file aces:sequence aces:uuid All these sub-elements are mandatory when aces:clipId is used, but it's important to remember that aces:sequence, aces:file and aces:uuid cannot coexist. They are mutually excluding each other and therefore are used for specific variants in a workflow. aces:clipName \u00b6 The aces:clipName is used to carry the name of the target visual material element, but not the file name of that element. Typically aces:clipName is the same as the file name but without the file extension or the frame number digits in the case of a file sequence. aces:file \u00b6 The aces:file element is used to carry the actual file name of the target visual material element. It can carry the full absolute path and the file name, a relative path and the file name or simply the file name (base name and extension) of the target visual material element. As it is the case with file names in general, path information and special characters supported or not supported by various file systems must be taken into account. The goal here is not to describe all the possibilities, but rather to recommend some best practices: * If the path (absolute or relative) is used in the file name, it should be limited to cases when the AMF document is only used within a closed system where the rules can be clearly defined. * Special characters or Unicode names can be used, but in general they might be a source of problems. While not forbidden, their use should be tested in the context of the desired workflow to ensure that all the tools and operating systems involved correctly support the selected convention. A good practice however would be to stick with ASCII characters only and avoid using path-like structures in file names. aces:sequence \u00b6 The aces:sequence is similar to aces:file, however it is primarily designed to handle image sequences. Image sequences usually follow a file name pattern and the only difference between two files of the same sequence, is a number which indicates the file's position in the sequence. Moreover, the number is using a fixed number of digits where the unused digits are replaced with zeroes. aces:sequence requires three different attributes to fully define a sequence of files: idx : a special character that the filename pattern uses to represent digits (e.g.#) min : a number that represents the first file in the sequence max : a number that represents the last file in the sequence In other words, min and max define a range of frame numbers and they are both part of the sequence (included). aces:uuid \u00b6 The last method for connecting the AMF document to a visual material element is by using aces:uuid. In this particular case, the connection between the AMF document and the actual visual material element is clearly handled elsewhere and not at the file system level. Various workflows will be described later that make use of the aces:uuid instead of aces:file or aces:sequence. However it's important to note that using UUID is probably the safest method , especially when the workflow is distributed across multiple tools, operating systems and even geographic locations. ACES pipeline configuration \u00b6 The ACES pipeline section is a list of ordered elements that define various steps of the ACES color pipeline. The pipeline is described by the aces:pipeline element. In turn, this element contains a list of sub-elements that describe the configuration of the various color processing stages that exist in the ACES color processing framework. Below is the list of sub-elements that can be found in the aces:pipeline element: aces:pipelineInfo aces:inputTransform aces:lookTransform aces:outputTransform These elements must appear in this exact order. Although these steps are described separately, this does not imply that a system has to process all pixels in a frame of visual material one step at a time. Some systems might do it while some others might need to crunch the various processing steps into a single transform, typically a 3D Lookup Table (3D LUT). Moreover a system may choose to optimize the processing of the various steps, depending on the given situation. The only constraint is that the color processing must follow the steps in the order described above. aces:pipelineInfo \u00b6 The aces:pipelineInfo element extends the set of properties found in the AMF document identification by adding an element to define the ACES system version. The role of this element is to specify the ACES system version targeted by this AMF file in order to produce the correct output. The system version is a crucial piece of information as it allows us to achieve interoperability and archivability. The aces:pipelineInfo element can (and should) be used to validate the AMF document itself. The following sections that describe the use of the input transforms, look transforms and output transforms mention the use of transform identifiers. Transform identifiers are also \"tagged\" with the ACES system version to ensure a match between the pipeline system version and the various transform identifiers. The validity of transform identifiers within the scope of a given ACES system version will be described later in a dedicated section. aces:inputTransform \u00b6 This element defines the input transform that is optionally applied to the source material referenced by aces:clipId. The input transforms can be either standard transforms defined within the ACES framework or custom transforms. Custom transforms can be referenced by their transform ID or referenced as external files/resources. Standard transforms can only be referenced by their transform ID. graph BT B1(ACES Input Transform Identifier) --> A1(AMF Input Transform) B2(Custom Input Transform Identifier) --> A1 B3(\"External Input Transform (e.g. CLF)\") --> A1 AMF Input Transform Support AMF can describe one Input Transform as an identifier or external reference An important observation must be made here: the aces:inputTransform is entirely optional. This implies that an AMF document can work in different environments, i.e with sources made of raw material, color pre-processed material and ACES only material. These different use cases will be discussed later in this document. If an aces:inputTransform element is present, then it must also define the \"applied\" attribute that will allow an AMF -aware tool to know if the input transform is provided for information purposes only or if it needs to be executed. aces:lookTransform \u00b6 This element is repeated for every step that defines a custom color processing in the ACES color space (e.g. color grading). There are 3 kinds of look transforms: Standard transforms defined within the ACES framework (such as Gamut Compression) \u25cb Standard transforms can only be referenced by their transform id. Embedded ASC - CDL transforms Embedded ASC - CDL transforms carry their parameters within the file and do not rely on any external information. External transforms stored in various formats ( ASC CDL XML , CLF , etc) External transforms can be referenced by either a unique ID or by a file name, described later in this document. aces:lookTransform elements are optional, and therefore AMF documents do not mandate any color processing beyond the processing provided by the ACES color processing framework. If an aces:lookTransform element is present, then it must also define the \"applied\" attribute that will allow an AMF -aware tool to know if the look transform is provided for information purposes only or if it needs to be executed. aces:outputTransform \u00b6 Finally, this element closes the list and defines both the RRT and ODT (or a combined Output Transform) to use in order to produce a presentable result. The RRT and ODT can be either specified independently of each other: <aces:outputTransform> <aces:referenceRenderingTransform> <aces:transformId>urn:ampas:aces:transformId:v1.5:RRT.a1.0.3</aces:transformId> </aces:referenceRenderingTransform> <aces:outputDeviceTransform> <aces:transformId>urn:ampas:aces:transformId:v1.5:ODT.Academy.P3D60_48nits.a1.0.3</aces:transformId> </aces:outputDeviceTransform> </aces:outputTransform> or combined: <aces:outputTransform> <aces:transformId>urn:ampas:aces:transformId:v1.5:RRTODT.Academy.Rec2020_1000nits_15nits_ST2084.a1.1.0</aces:transformId> </aces:outputTransform> The RRT and ODT (as well as the combined versions) are standard color transforms defined within the ACES framework. AMF & external LMT referencing rules \u00b6 Using <aces:file> \u00b6 The simplest way to reference external LMTs is to use the aces:file element. However, some care must be taken, depending on the workflow and also on the system or device generating the AMF document. The aces:file element is defined as an XML standard type called xs:anyURI. This type allows a very large set of possibilities by using the Uniform Resource Identifier (URI) syntax: file access on a local or remote file system, HTTP or FTP access and much more. All of these possibilities are identified by a scheme, which is a predefined syntax to allow unambiguous interpretation of the URI. Although there are situations where this might not be possible.This document will mainly focus on the file access on computer file systems or embedded file systems (e.g. in-camera). File access is accomplished by the use of the file:// scheme as a prefix to the file location. It is assumed that in a file system centric workflow, the omission of the file:// scheme means that the URI is the actual file name of the external resource, i.e. the LMT . This is probably the most common use. Resolving the file location by the means of the file name may still be problematic, especially because of how various file systems identify disks or volumes. In order to simplify the file name resolution, the following rules are recommended: Avoid the use absolute file names, i.e. file names that contain the full path from the root of the disk or volume Avoid using external LMTs in folders that exist at a higher level in the file system hierarchy than the location of the AMF document Avoid the use of \"current path\" and \"one level up\" path segments as they might not be interpreted correctly by the systems and/or devices that need to work with the AMF document and its externally referenced resources. Example: For an AMF file with the following location: C:\\MyAMFDocuments\\myAMF.amf The external resources, i.e. LMTs, should be located either at the same level, like this: C:\\MyAMFDocuments\\myAMF.amf C:\\MyAMFDocuments\\myLookTransform.clf or in a sub-folder like this: C:\\MyAMFDocuments\\myAMF.amf C:\\MyAMFDocuments\\myAMFLooks\\myLookTransform_First.clf C:\\MyAMFDocuments\\myAMFLooks\\myLookTransform_Second.clf In addition to the recommendations listed above, it is also highly recommended to avoid deep hierarchies for the sub-folders as these can easily cause trouble when the files are moved to a file system with limitations on the file path length. If the external resources cannot be stored in the same folder as the AMF document or in sub-folders relative to the AMF document's location, then the system/device working with the AMF document should provide some user interface means to allow the selection of the location. If automation, without user intervention, is desired, the system/device should provide a configuration file to specify the location. File name characters \u00b6 As stated before, modern file systems are very permissive in terms of file naming. Moreover, most systems have either no limit on the file name length or a very large limit that exceeds easily most of the use cases. Taking advantage of these file system features might not be a good practice though. These limitations differ among the file systems in use and migrating files from one file system to another might result in errors or even truncated file names. In order to avoid problems at the file system level, consider following these rules: Keep files name lengths under 128 characters, file name extension included Restrict the file name extension to 3 characters Use only alphabetical characters for the file name extension Use the native or recommended file name extension for the external resource (e.g. CLF or clf for the Common LUT Format) File naming conventions \u00b6 AMF does not impose a strict file naming convention on the external resources. However it is also highly recommended that a proper and meaningful one is adopted when naming those resources. Proper file naming conventions not only ease the inspection of the files in a file system but also can provide a better reading when displayed in the graphical user interface of the system/device used to manage them. Since these systems/devices can have a limited display room, short names should be considered. Retrieving external LMTs via HTTP \u00b6 The resources identified by a URI using the \"http\" or \"https\" schemes can be retrieved as the response to a GET request to the URI. When working with CLF -based LMTs, care must be taken to clearly indicate the content type in the HTTP headers. For instance AMF and CLF are XML -based specifications and HTTP allows the content type to signal XML in many different ways. Two popular ones are: text/xml application/xml These should be preferred in a HTTP transaction when working with AMF and CLF . HTTP transactions can require authentication in order to access the AMF and the LMTs. Authentication and encryption topics are outside the scope of this document. Nevertheless it's important to consider these issues in a workflow that is distributed around various locations as not all systems/devices support the HTTP security features Using <aces:uuid> \u00b6 CLF ProcessList root element shall have the id attribute set with the sameUUID, e.g: AMF <aces:uuid>urn:uuid:1258F89C-0ED7-4A79-0E2-36F97E8FF9F1</aces:uuid> CLF <ProcessList xmlns=\"urn:AMPAS:CLF:v3.0\" id=\"urn:uuid:1258F89C-0ED7-4A79-B0E2-36F97E8FF9F1\" compCLFversion=\"3.0\"> </ProcessList> The CLF files can be located anywhere and the product supporting AMF + CLF must provide the configuration options to locate the CLFassets, or,search for the CLF files in the local folder for the corresponding CLF files\u2022recursive search in subfolders should be supported (option) Annex \u00b6 Avid Log Exchange ( ALE ) support \u00b6 The Avid Log Exchange ( ALE ) format supports custom metadata elements through the definition of dedicated columns in the ALE table. In order to support AMF linkage through ALE , the following columns are defined: AMF_UUID AMF_NAME These two columns enable the linkage of AMF files, independently for every clip listed in the ALE file. Both AMF_UUID and AMF_NAME are defined as optional. The linkage rules are described below. AMF_UUID \u00b6 The AMF_UUID column shall be used to convey the AMF UUID from the amf:Info/uuid element. The format of the column entries must use the canonical textual representation, the 16 octets of a UUID are represented as 32 hexadecimal (base-16) digits, displayed in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 alphanumeric characters and 4 hyphens): afe122be-59d3-4360-ad69-33c10108fa7a The AMF_UUID column is optional. AMF_NAME \u00b6 AMF_NAME shall be used to convey the AMF file name located in the same folder as the .ale source file: clip_001.amf The AMF_NAME is optional. When present, it should indicate the file name of the AMF document related to the clip. The AMF file must reside locally in the same folder as the ALE file. No sub-folder structure is permitted. While AMF files can have any name, it is recommended to follow the restrictions imposed by the ALE Specification, i.e. to use the UNC Path syntax. Linkage Rules \u00b6 Since both AMF_UUID and AMF_NAME are optional, there are four possible combinations that can occur: AMF_UUID and AMF_NAME are both absent: In this case, no AMF file can be associated with the clip and is treated like a regular ALE file AMF_UUID is present and AMF_NAME is absent: In this case the host product must look for the corresponding AMF files into a database, using the UUID as a key to match the AMF file and the corresponding clip. Please note that the word \"database\" does not imply any specific implementation. This feature many not be supported by the host product AMF_UUID is absent and AMF_NAME is present: In this case, the AMF_NAME column contains file names for AMF files that should be located at the same level in the file system (i.e. same folder) as the ALE file, or in a subfolder. The linkage is based on the file name and the UUID of the AMF files (if present) is ignored AMF_UUID and AMF_NAME are both present: In this case, the host product can select between the methods described in 2) and 3). However, it is recommended to rely on the UUID in priority. The host product can provide an option to select the matching rule ( UUID or file name). It is desirable to also provide a matching rule that checks both the UUID and file name. Remarks \u00b6 Since the ALE file can reference a large number of clips, it is recommended that the host product presents the issues encountered during the linkage and validation process as a log. ALE files can carry inline ASC parameters. When using AMF with ALEs, the inline ASC parameters should be absent to avoid confusion, or ignored if present. AMF files can have an optional aces:clipId element that is used to identify the clip that the AMF is related to. The aces:clipId element can carry a reference using different methods (e.g. file name, UUID , etc). It is strongly recommended that the clip identification method used in AMF correlates with the method used in the ALE files (e.g. file name). If the same AMF file is shared by multiple clips, it is recommended to avoid the use of aces:clipId or ignore it. A validation process can log any differences and present the results to the user of the product/tool processing the ALE + AMF files Edit Decision List ( EDL ) support \u00b6 The CMX3600 Edit Decision List ( EDL ) format supports custom extensions through the definition of dedicated directives following the edit statements in the decision list. In order to support AMF linkage through EDL , the following directives are defined: AMF_UUID AMF_NAME These two directives enable the linkage of AMF files, independently for every clip listed in the EDL file. Both AMF_UUID and AMF_NAME are defined as optional. The linkage rules are described below. AMF_UUID \u00b6 The AMF_UUID column shall be used to convey the AMF UUID from the amf:Info/uuid element. The format of the column entries must use the canonical textual representation, the 16 octets of a UUID are represented as 32 hexadecimal (base-16) digits, displayed in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 alphanumeric characters and 4 hyphens): afe122be-59d3-4360-ad69-33c10108fa7a The AMF_UUID column is optional. When present, it should indicate a path to the AMF file that is relative to the folder where the ALE file is located. The path hierarchy MUST not contain the parent folder or local folder distinguished values, i.e. \"..\" and \".\" to avoid any confusion. The path and AMF file name must use characters from the set a-z, A-Z, 0-9, - (dash), _ (underscore) and \".\". No path segment shall use more than 128 characters and the total length shall not exceed 1024 characters. AMF_NAME \u00b6 AMF_NAME shall be used to convey the AMF file name located in the same folder as the .edl source file: clip_001.amf The AMF_NAME is optional. When present, it should indicate the file name of the AMF document related to the clip. The AMF file must reside locally in the same folder as the EDL file. No sub-folder structure is permitted. While AMF file can have any name, it is recommended to use the same base name as the clip file that the AMF document relates to. Moreover to ensure portability across file systems and operating systems it is recommended to use characters from the set a-z, A-Z, 0-9, - (dash), _ (underscore) and \".\". The AMF file name should use no more than 1024 characters. Linkage Rules \u00b6 Since both AMF_UUID and AMF_NAME are optional, there are four possible combinations that can occur: AMF_UUID and AMF_NAME are both absent In this case, no AMF file can be associated with the clip AMF_UUID is present and AMF_NAME is absent In this case the host product must look for the corresponding AMF files into a database, using the UUID as a key to match the AMF file and the corresponding clip. Please note that the word \"database\" does not imply any specific implementation. This feature many not be supported by the host product AMF_UUID is absent and AMF_NAME is present In this case, the AMF_NAME column contains file names for AMF files that should be located at the same level in the file system (i.e. same folder) as the EDL file, or in a subfolder. The linkage is based on the file name and the UUID of the AMF files (if present) is ignored AMF_UUID and AMF_NAME are both present In this case, the host product can select between the methods described in 2) and 3). However, it is recommended to rely on the UUID in priority. The host product can provide an option to select the matching rule ( UUID or file name). It is desirable to also provide a matching rule that checks both the UUID and file name. EDL event example \u00b6 ... 010 Clip1 V C 05:40:12:18 05:40:14:09 01:00:29:16 01:00:31:07 * AMF_NAME clip_001.amf * AMF_UUID afe122be-59d3-4360-ad69-33c10108fa7a ... Remarks \u00b6 Since each entry in the EDL file can use any of the combinations of AMF_UUID and AMF_NAME described above, it is recommended that the host product presents the issues encountered during the linkage and validation process as a log. EDL files can carry inline ASC parameters. When using AMF with EDLs, the inline ASC parameters should be absent to avoid confusion, or ignored if present. AMF files can have an optional aces:clipId element that is used to identify the clip that the AMF is related to. The aces:clipId element can carry a reference using different methods (e.g. file name, UUID , etc). It is strongly recommended that the clip identification method used in AMF correlates with the method used in the EDL files (e.g. file name). If the same AMF file is shared by multiple clips, it is recommended to avoid the use of aces:clipId or ignore it. A validation process can log any differences and present the results to the user of the product/tool processing the EDL + AMF files. @import \"../../stylesheets/sections.css\"","title":"ACES Metadata File (AMF) Implementation Guide"},{"location":"guides/amf/#aces-metadata-file-implementation-guidelines-and-best-practices","text":"","title":"ACES Metadata File Implementation Guidelines and Best Practices"},{"location":"guides/amf/#scope","text":"This document is a guide that recommends implementation guidelines and best practices related to the usage of the ACES Metadata File ( AMF ) in various workflows. These workflows may involve one or more tools that support the AMF specification and this guide attempts to help both implementers and users in order to facilitate interoperability.","title":"Scope"},{"location":"guides/amf/#references","text":"The following standards, specifications, articles, presentations, and texts are referenced in this text: Academy S-2019-001, ACES Metadata File ( AMF ) IETF RFC 4122, A Universally Unique IDentifier ( UUID ) URN Namespace","title":"References"},{"location":"guides/amf/#introduction","text":"The Academy Color Encoding System ( ACES ) is a color processing framework that enables the mix of various sources within a standardized color space in order to produce one or more outputs. While ACES is a living framework and is actively developed and adopted, it also comes with various points that can be configured. These points of configuration are either related to the sources used (Input Transforms), a creative look (Look Transforms), the desired outputs (Output Transforms), or the Version Number (i.e. ACES v1.1) of the core transforms built into the ACES system. ACES does not specify these configuration points directly or associate them with actual images or shots during production, and this is the very reason why AMF exists. AMF is the configuration file that allows a precise setup for an ACES pipeline. Besides this basic goal, AMF is also the tool of choice to transmit and exchange configuration parameters in order to ensure consistency within a workflow and across the entire ecosystem of tools that are used within that workflow.","title":"Introduction"},{"location":"guides/amf/#target-audience","text":"AMF is a sidecar file specified using the XML markup language, and as such it can be processed by machines and at the same time created/modified by users. This document targets both AMF users and AMF implementers because both groups need the same level of understanding in order to design AMF -enabled workflows and tools that support those workflows.","title":"Target Audience"},{"location":"guides/amf/#what-is-amf","text":"AMF is an XML specification that describes the configuration of an ACES color pipeline, together with the various input transforms, look transforms and output transforms. AMF is a \"sidecar\" element, usually accompanying some visual material such as a video file, a sequence of frames, or a whole timeline. In the case of a timeline, more than one AMF file can be used if the timeline requires different configurations of the ACES pipeline. It is also worth mentioning that several AMF files can reference the same visual material. The opposite is equally true as all these visual elements can share a single AMF file or a whole set of them. This of course is entirely dependent on the workflow, and tools implementing AMF should be prepared to deal with this flexibility. In general, the relationship between the visual elements and the AMF files can be described as a \"many to many\" relationship.","title":"What is AMF"},{"location":"guides/amf/#why-is-amf-needed","text":"The ACES framework is expanding and becoming richer in terms of input, look, and output transforms. AMF describes the exact list of these different transforms, in the order in which they have been or should be applied to obtain the desired result. graph LR A1[Input Media] --> B(Input Transform) subgraph AMF Complete Processing Path Description B --> C1(Look Transform) C1 --> D1(Output Transform) end A2[ACES Material] ---> C2(Look Transform) subgraph AMF Partial Processing Path Description C2 --> D2(Output Transform) end AMF Processing Path Description This is a powerful feature because it can describe both configurations that must be used to create a specific output, or configurations that have been used to create a specific output. graph TB B1 --> A1(AMF Look Modification Transform Chain) B2 --> A1 B3 --> A1 subgraph B1(\"ASC-CDL or External LMT (active)\") B2(\"ASC-CDL or External LMT (disabled)\") B3(\"ASC-CDL or External LMT (active)\") end classDef disabled opacity: 0.5 class B2 disabled Each block in the chain can be an ASC-CDL or an external LUT. Blocks can be enabled or disabled Finally, another feature of AMF is the ability to document a \"change log\" in an ACES color pipeline. This is called the \"archived pipeline\" and will be discussed later in the document.","title":"Why is AMF needed"},{"location":"guides/amf/#the-applied-attribute","text":"Each transform in an AMF can be tagged with the attribute called applied - which indicates whether a transform has already been applied ( applied=true ), in which case the transform has already been baked into the image, or if the transform has not been applied ( applied=false ), in which case the transform should be loaded as part of the viewing pipeline. One use case of this might be when using the ACES Gamut Compression transform, which may be baked into SMPTE ST 2065-1 ACES image data, and it is essential to communicate to downstream software that it has already been applied, as to not double-apply the transform, or invert it if necessary.","title":"The \u201capplied\u201d attribute"},{"location":"guides/amf/#lifecycle-of-amf","text":"This section describes the life cycle of an AMF and how it could be used within each production stage.","title":"Lifecycle of AMF"},{"location":"guides/amf/#camera","text":"While on set, AMF could be imported in-camera and used to apply color pipeline settings for video and file output, or exported to a camera card when using a camera\u2019s ACES viewing pipeline. See section 7 for more on cameras reading/writing AMF .","title":"Camera"},{"location":"guides/amf/#monitor","text":"Some professional monitors allow import of LUTs to apply looks in-device. AMF could replace proprietary or uncommon LUT formats for improved interoperability.","title":"Monitor"},{"location":"guides/amf/#on-set-live-grading","text":"An AMF may be read by on-set live grading software for the purpose of on-set monitoring and color grading within ACES . If anything is altered within the domain of the pipeline defined in the AMF , a new AMF is created to reflect those modifications. For example, an ACES pipeline is established in an AMF before production, then CDL adjustments are created during production to create an updated AMF accordingly.","title":"On-set live grading"},{"location":"guides/amf/#dailies","text":"In a dailies tool, a pre-created AMF could be read and associated with OCF (Original Camera Files) to apply pipeline settings (for viewing and rendering). This could be done either by manual association or automatically. In the process of creating the dailies, the color pipeline coming from an existing AMF may be modified and updated. AMFs are written out with media to be passed to editorial software. Commonly used interchange files (e.g. EDL or ALE ) can be used to conform AMF files with OCF , see below for more details.","title":"Dailies"},{"location":"guides/amf/#editorial","text":"Editorial software can apply pipeline settings provided by AMF (s) when importing media to automatically set up viewing and rendering.","title":"Editorial"},{"location":"guides/amf/#vfx","text":"Read AMF (s) when importing plates into VFX software and apply pipeline settings for viewing. Given the prevalence of OpenColorIO across VFX software, it is likely that a translation from AMF to OpenColorIO ( OCIO ) would be required.","title":"VFX"},{"location":"guides/amf/#color-grading","text":"When in color grading, AMF could be conformed to a timeline and associated with OCF to apply pipeline settings (for viewing and rendering). These applications should also allow for look development in ACES and subsequent exporting of AMF .","title":"Color Grading"},{"location":"guides/amf/#review","text":"Review software could automatically apply ACES pipeline settings for viewing purposes by reading AMF (s) when importing media or by manually applying AMF (s) to imported media.","title":"Review"},{"location":"guides/amf/#mastering-and-archiving","text":"Read AMF (s) when importing media and apply pipeline settings for viewing. Consolidate AMF (s) to meet specific archival delivery requirements.","title":"Mastering and Archiving"},{"location":"guides/amf/#considerations-on-readingwriting-amf","text":"This section outlines various scenarios related to the reading and writing of AMF files. Scenario Read - An AMF is read when importing media and used to populate a color pipeline for viewing and rendering. Write - A new AMF is written in order to be passed along to the next production stage. If a new AMF is done from a previous AMF , the previous pipeline might be archived in the section. RAW Clips AMF does not include any metadata for demosaic settings. Implementations need to ensure that the image is demosaicked to the appropriate color space before the Input Transform defined in the AMF is applied. User input may be required. If software chooses to directly demosaic a RAW image to ACES , the Input Transform defined in the AMF must be ignored. n/a Input Transform Conflict A clip has already been loaded into the software, and an Input Transform is already applied. Default behaviour should be to override that Input Transform with what\u2019s specified in the AMF , but the user should be prompted. n/a Output Transform Conflict If the AMF specifies an Output Transform that is in conflict with the respective shot\u2019s Output Transform, then this conflict must be handled. The default behaviour should be to stick with the project-wide Output Transform, but it may be useful to indicate a conflict to the user. Example: An AMF is generated from a software platform that uses the Rec709_100nits transform, and is then read by a software platform that is using an HDR Output Transform. The Output Transform that was indeed used for viewing should be specified in the AMF . Manual AMF Batch Import/Export Consider the use of commonly used interchange files (e.g. EDL or ALE ) to batch import AMF \u2019s to a timeline. Ideally, the software would allow for a partial import of only the Input, Look, or Output Transforms of a given AMF . When exporting a batch of AMF \u2019s for an entire timeline, consider exporting commonly used interchange files (e.g. EDL or ALE ) to create an association between Clips and the exported AMF files. Inter- AMF Output Transform Conflict If AMF \u2019s are batch imported into a single timeline, and at least two of them have different Output Transforms defined, consider prompting the user if this inconsistency exists, and provide appropriate options to address. This has the assumption that the user will only be using one Output Transform at a time for an entire timeline. n/a Pipeline Override If an AMF has already been applied to a shot, or if project/timeline settings apply, and a subsequent AMF is read for that shot, consider prompting the user before overriding pipeline. Ideally, the software would allow for a partial import of only the Input, Look, or Output Transforms of a given AMF . Consider including multiple AMF transform pipelines by making use of AMF \u2019s aces:archivedPipeline element. Updating Look Transforms n/a Local changes to transforms in the AMF should not affect any other transforms if the pipeline structure doesn\u2019t change, e.g. when only updating CDL values, but none of the other transforms change, the AMF structure should not be changed and only the CDL values should be updated. Any changes to the transform pipeline will result in a new AMF and global values, e.g. the dateTime element, are therefore expected to change. If CLF (s) are used in the pipeline, consider using CLF UUID and/or its hash to make sure that the CLF has not changed. Look Transform Support If an AMF references a Look Transform with a format that the application does not support reading, consider notifying the user that the format is unsupported, so it is clear the error is unrelated to the AMF itself. When producing a new Look Transform for an AMF export, consider defaulting to CLF , a format that ensures high interoperability,, especially for any operations other than ASC CDL . It\u2019s important to consider what to do when using CDL operations vs other grading operations and how these should be reflected in the AMF document: in elaborated pipeline where CDL are \u201cin between\u201d other more sophisticated grading operations, it might be required to let the user identify and decide over what CDL operations should be treated as such and which ones can be baked with other operations into a consolidated CLF Cameras Import AMF in-camera and apply pipeline settings for video and file output. An AMF loaded in camera could specify over SDI how to treat the incoming signal (ie Output Transform) There are reasonable expectations that any in-camera processing, for the foreseeable future, will be done utilizing small 3D LUTs at the highest complexity. Therefore, applications of an ACES pipeline in-camera may be limited in precision. When should a camera generate an AMF ? If a camera generates an AMF , where should it be written? #1 Preferred Method: Embedded in the OCF , e.g.REDCODE RAW R3D #2 Preferred Method: AMF should live in the same directory as its associated clip #3 Preferred Method: * A single folder with all AMF files Metadata Population Parse the AMF for its filename and aces:uuid and write these to the appropriate metadata fields for each clip. If the AMF associated with a clip changes, the value relative to the AMF metadata fields within the editorial software should change and adopt the new values. So when writing commonly used interchange files (e.g. EDL or ALE ) the correspondent values are correct. Applied Tag When reading an AMF file that has the applied=true attribute for a specific transform, the software should NOT apply the transform to the file, since it has already been applied to the image itself. Consider reporting it to the user if applicable (e.g. a \u201chistory\u201d log of the transforms is accessible for each clip) When exporting AMF \u2019s from a timeline of clips that have not been rendered yet, each transform in the AMF should be tagged as applied=false . However, when rendering new files, consider having the ability to export new AMF \u2019s files simultaneously as part of the same deliverable and, in this case, each transform that is actually baked in should be tagged as applied=true in the AMF (e.g. the Input Transform if rendering OpenEXR ACES 2065-1 VFX pulls, or everything when exporting 709 proxies for editorial). Archived Pipelines Consider allowing the user to toggle between different ACES pipelines that are recorded in the aces:archivedPipeline element. Otherwise, aces:archivedPipeline elements should be preserved for any new AMF \u2019s subsequently created for the same shots. If the software is updating a pre-existing AMF , the written AMF should include the appropriate aces:archivedPipeline element.","title":"Considerations on reading/writing AMF"},{"location":"guides/amf/#structure-of-amf","text":"AMF is a specification based on the XML markup language. It is fully described in Academy Specification S-2019-001 . The specification also comes with an XML Schema that can be used to validate the AMF documents. The XML Schema is publicly available here: https://github.com/ampas/aces-dev/tree/master/formats/amf The guidelines and best practices in this document are provided to help both implementers and users to take full advantage of AMF . It is strongly recommended to use the specification as a reference in order to better understand the concepts described here.","title":"Structure of AMF"},{"location":"guides/amf/#amf-document-sections","text":"AMF documents are mainly divided in 3 sections: aces:amfInfo - this section provides descriptive information about the AMF itself. aces:clipId - this section provides a reference to the visual material ( OCF or rendered images) that this AMF is applicable for. aces:pipeline - this section describes the ACES pipeline configuration.","title":"AMF document sections"},{"location":"guides/amf/#general-descriptive-information","text":"The aces:amfInfo element contains various sub-elements that provide descriptive information about the AMF document but also a mechanism to help identification. More specifically two sub-elements deserve some consideration: aces:dateTime aces:uuid The mandatory aces:dateTime element contains the creation and modification date. The aces:uuid element is optional and is designed to carry a Universally Unique Identifier (also known as Globally Unique Identifier, or GUID on some systems). The Universally Unique Identifier is specified in IETF RFC 4122 as well as other ISO and ITU documents. Both aces:dateTime and aces:uuid elements are not filled in by a human operator but rather automatically generated by the tool used to create the AMF document.","title":"General descriptive information"},{"location":"guides/amf/#clip-information-and-association","text":"As described in the previous sections, AMF can be used with different targets, i.e. single file video clips, image sequences, compositions, etc. This flexibility implies that the AMF specification does not prescribe a specific way to create the connection with the target material. Instead, the specification offers different connection mechanisms via the aces:clipId, an optional structure that in turn contains child elements to help with the handling of the various situations. The first important observation to make is that the aces:clipId element itself is defined as optional. In this context, optional does not mean that the presence or absence of the aces:clipId element does not affect the workflow and how tools that support AMF behave. The term optional must be understood as a switch between two categories of workflow: the first does not connect an AMF file to a specific visual material and the second does connect an AMF file to a specific visual material. Depending on the workflow in use, an implementation must handle the presence or absence correctly and report errors if necessary. Typically, the XML validation only will not be enough to distinguish between a valid AMF file and an invalid one, since the aces:clipId element is optional. In other words, the aces:clipId does not dictate how the AMF document is handled. It is the workflow that dictates the behavior.","title":"Clip information and association"},{"location":"guides/amf/#aces-pipeline-configuration","text":"The ACES pipeline section is a list of ordered elements that define various steps of the ACES color pipeline. The pipeline is described by the aces:pipeline element. In turn, this element contains a list of sub-elements that describe the configuration of the various color processing stages that exist in the ACES color processing framework. Below is the list of sub-elements that can be found in the aces:pipeline element: aces:pipelineInfo aces:inputTransform aces:lookTransform aces:outputTransform These elements must appear in this exact order. Although these steps are described separately, this does not imply that a system has to process all pixels in a frame of visual material one step at a time. Some systems might do it while some others might need to crunch the various processing steps into a single transform, typically a 3D Lookup Table (3D LUT). Moreover a system may choose to optimize the processing of the various steps, depending on the given situation. The only constraint is that the color processing must follow the steps in the order described above.","title":"ACES pipeline configuration"},{"location":"guides/amf/#amf-external-lmt-referencing-rules","text":"","title":"AMF &amp; external LMT referencing rules"},{"location":"guides/amf/#using-acesfile","text":"The simplest way to reference external LMTs is to use the aces:file element. However, some care must be taken, depending on the workflow and also on the system or device generating the AMF document. The aces:file element is defined as an XML standard type called xs:anyURI. This type allows a very large set of possibilities by using the Uniform Resource Identifier (URI) syntax: file access on a local or remote file system, HTTP or FTP access and much more. All of these possibilities are identified by a scheme, which is a predefined syntax to allow unambiguous interpretation of the URI. Although there are situations where this might not be possible.This document will mainly focus on the file access on computer file systems or embedded file systems (e.g. in-camera). File access is accomplished by the use of the file:// scheme as a prefix to the file location. It is assumed that in a file system centric workflow, the omission of the file:// scheme means that the URI is the actual file name of the external resource, i.e. the LMT . This is probably the most common use. Resolving the file location by the means of the file name may still be problematic, especially because of how various file systems identify disks or volumes. In order to simplify the file name resolution, the following rules are recommended: Avoid the use absolute file names, i.e. file names that contain the full path from the root of the disk or volume Avoid using external LMTs in folders that exist at a higher level in the file system hierarchy than the location of the AMF document Avoid the use of \"current path\" and \"one level up\" path segments as they might not be interpreted correctly by the systems and/or devices that need to work with the AMF document and its externally referenced resources. Example: For an AMF file with the following location: C:\\MyAMFDocuments\\myAMF.amf The external resources, i.e. LMTs, should be located either at the same level, like this: C:\\MyAMFDocuments\\myAMF.amf C:\\MyAMFDocuments\\myLookTransform.clf or in a sub-folder like this: C:\\MyAMFDocuments\\myAMF.amf C:\\MyAMFDocuments\\myAMFLooks\\myLookTransform_First.clf C:\\MyAMFDocuments\\myAMFLooks\\myLookTransform_Second.clf In addition to the recommendations listed above, it is also highly recommended to avoid deep hierarchies for the sub-folders as these can easily cause trouble when the files are moved to a file system with limitations on the file path length. If the external resources cannot be stored in the same folder as the AMF document or in sub-folders relative to the AMF document's location, then the system/device working with the AMF document should provide some user interface means to allow the selection of the location. If automation, without user intervention, is desired, the system/device should provide a configuration file to specify the location.","title":"Using &lt;aces:file&gt;"},{"location":"guides/amf/#file-name-characters","text":"As stated before, modern file systems are very permissive in terms of file naming. Moreover, most systems have either no limit on the file name length or a very large limit that exceeds easily most of the use cases. Taking advantage of these file system features might not be a good practice though. These limitations differ among the file systems in use and migrating files from one file system to another might result in errors or even truncated file names. In order to avoid problems at the file system level, consider following these rules: Keep files name lengths under 128 characters, file name extension included Restrict the file name extension to 3 characters Use only alphabetical characters for the file name extension Use the native or recommended file name extension for the external resource (e.g. CLF or clf for the Common LUT Format)","title":"File name characters"},{"location":"guides/amf/#file-naming-conventions","text":"AMF does not impose a strict file naming convention on the external resources. However it is also highly recommended that a proper and meaningful one is adopted when naming those resources. Proper file naming conventions not only ease the inspection of the files in a file system but also can provide a better reading when displayed in the graphical user interface of the system/device used to manage them. Since these systems/devices can have a limited display room, short names should be considered.","title":"File naming conventions"},{"location":"guides/amf/#retrieving-external-lmts-via-http","text":"The resources identified by a URI using the \"http\" or \"https\" schemes can be retrieved as the response to a GET request to the URI. When working with CLF -based LMTs, care must be taken to clearly indicate the content type in the HTTP headers. For instance AMF and CLF are XML -based specifications and HTTP allows the content type to signal XML in many different ways. Two popular ones are: text/xml application/xml These should be preferred in a HTTP transaction when working with AMF and CLF . HTTP transactions can require authentication in order to access the AMF and the LMTs. Authentication and encryption topics are outside the scope of this document. Nevertheless it's important to consider these issues in a workflow that is distributed around various locations as not all systems/devices support the HTTP security features","title":"Retrieving external LMTs via HTTP"},{"location":"guides/amf/#using-acesuuid","text":"CLF ProcessList root element shall have the id attribute set with the sameUUID, e.g: AMF <aces:uuid>urn:uuid:1258F89C-0ED7-4A79-0E2-36F97E8FF9F1</aces:uuid> CLF <ProcessList xmlns=\"urn:AMPAS:CLF:v3.0\" id=\"urn:uuid:1258F89C-0ED7-4A79-B0E2-36F97E8FF9F1\" compCLFversion=\"3.0\"> </ProcessList> The CLF files can be located anywhere and the product supporting AMF + CLF must provide the configuration options to locate the CLFassets, or,search for the CLF files in the local folder for the corresponding CLF files\u2022recursive search in subfolders should be supported (option)","title":"Using &lt;aces:uuid&gt;"},{"location":"guides/amf/#annex","text":"","title":"Annex"},{"location":"guides/amf/#avid-log-exchange-ale-support","text":"The Avid Log Exchange ( ALE ) format supports custom metadata elements through the definition of dedicated columns in the ALE table. In order to support AMF linkage through ALE , the following columns are defined: AMF_UUID AMF_NAME These two columns enable the linkage of AMF files, independently for every clip listed in the ALE file. Both AMF_UUID and AMF_NAME are defined as optional. The linkage rules are described below.","title":"Avid Log Exchange (ALE) support"},{"location":"guides/amf/#edit-decision-list-edl-support","text":"The CMX3600 Edit Decision List ( EDL ) format supports custom extensions through the definition of dedicated directives following the edit statements in the decision list. In order to support AMF linkage through EDL , the following directives are defined: AMF_UUID AMF_NAME These two directives enable the linkage of AMF files, independently for every clip listed in the EDL file. Both AMF_UUID and AMF_NAME are defined as optional. The linkage rules are described below.","title":"Edit Decision List (EDL) support"},{"location":"guides/rgc-user/","text":"ACES Reference Gamut Compression User Guide \u00b6 Scope \u00b6 The purpose of this document is to elaborate on suggested user workflows for on set, dailies, visual effects, and finishing using the ACES Reference Gamut Compression ( RGC ). For detailed technical specifications, please refer to the ACES Gamut Mapping Architecture VWG - Technical Documentation. References \u00b6 The following standards, specifications, articles, presentations, and texts are referenced in this text: ACES Gamut Mapping Architecture VWG - Technical Documentation Deliverable Introduction \u00b6 A common complaint from users of ACES has been the artifacts resulting from out of gamut values in source images. These artifacts are most known for appearing in highly saturated, bright LED light sources such as police car lights, stoplights, etc - but also show up frequently in LED sources used to light scenes. In an ACES workflow, these artifacts appear at two stages - first in the conversion from camera raw RGB via an Input Transform ( IDT ) into ACES AP0 - and second in the conversion from ACES AP0 into ACES AP1 (ACEScg and ACEScct). These out of gamut pixel values are problematic when their negative components cause issues in compositing, and may also produce visual artifacts when viewed through an ACES Output Transform. A Look Modification Transform ( LMT ) referred to as the blue light artifact fix was created as a temporary solution, but this solution affected all pixels in the image, rather than just the problem areas. A new solution was needed which preserved colors within a \u201czone of trust\u201d, only altering the most saturated values. The Reference Gamut Compression algorithm published in ACES 1.3 is intended to replace and deprecate the Blue Light Artifact LMT . Various options were investigated, and the working group finally settled on a simple RGB ratio based algorithm which compresses values based on their distance from the neutral axis. This makes no attempt to ascertain the \u201ccorrect\u201d value for a pixel, since the nature of the problem means that these pixels may have no correct color. The algorithm is intended as a technical correction rather than an aesthetic look. It \u201cheals\u201d the problem pixels, to produce new RGB values which are less problematic when used in subsequent compositing or grading operations. Creative modifications are left for the user to apply as necessary downstream of the RGC . The ACES Reference Gamut Compression uses fixed values 1 for the thresholds where compression begins, and for the amount of compression. These values have been calculated such that the colors of the ColorChecker 24 will remain unchanged, and that any colors that are within the encoding gamuts of all the commonly used digital cinema cameras (those with official ACES IDTs) will be brought within AP1, thus ensuring positive ACEScg values. In most workflows, these constants will be invisible to the user, as demonstrated in the screenshots from Resolve 17.4 below - the user has the option to apply the RGC at a project or a clip level. Reference Gamut Compression enabled via Project Settings in DaVinci Resolve 17.4 Reference Gamut Compression individual clip settings in DaVinci Resolve 17.4 In the example below, artifacts such as the magenta solarization seen on the nose of the Okja toy are greatly reduced by application of the RGC . Without the RGC With the RGC applied Though the algorithm itself and application to an image is relatively simple, there are many considerations to discuss for overall workflows for an ACES project, from on set through to finishing. General Workflow \u00b6 As visualized in the flowchart above, it is recommended (in the current absence of AMF for tracking) that most productions utilize the gamut compression in every area - from on set all the way to finishing. This means that at this time, for simplicity, the the RGC is \u201calways on\u201d by default in any viewing pipeline. Following the general ACES workflow philosophy, the RGC is only baked in to image data at the appropriate stage in the pipeline - which varies based on the needs of your production, as outlined in the flow chart and explained below. On Set \u00b6 Live Grading \u00b6 If your production is utilizing an on set grading software, such as Pomfort Livegrade, use it to apply the Reference Gamut Compression. This will embed the RGC in the 3D LUT which is passed to the LUT box for viewing on a monitor. In-Camera \u00b6 The production can create a 3D LUT of the appropriate size (normally 33x33x33 max) with the Reference Gamut Compression added to the existing viewing pipeline to load into the camera. Dailies \u00b6 Use a dailies generation software, such as Colorfront or Resolve, to import the original camera footage, and apply the Reference Gamut Compression as a part of your viewing pipeline for export to desired media. Editorial \u00b6 Use media supplied from dailies, and back from VFX , to verify media as work progresses. As editorial is largely offline and based on proxy media, the RGC , as viewed on set, should be baked into the files sent to editorial. VFX \u00b6 Frame pulls for VFX should NOT have the Reference Gamut Compression baked in. The files should be debayered to AP0. VFX will have the flexibility to apply the RGC wherever is best for their compositing chain. This will often be the first node in the tree, but sometimes operations such as a despill on a bluescreen will need to be performed pre-gamut compression. Sending pulls to VFX in AP0 gives compositors the flexibility to fine tune and control their work. Once applied, the Reference Gamut compression should NOT be inverted before delivery. It is important that the RGC get applied to all WIP QT renders for review and editorial, so as to match dailies. Finishing \u00b6 Finishing software should have the ability to apply the RGC at a project, timeline, or clip level. This should give the colorist flexibility to choose what works best for the project. The RGC should be applied directly after the IDT , ideally before any scaling, grading, or other finishing work. In a pre-conformed timeline, apply the RGC as early as possible. If frames are coming back from VFX , it will be important to track those vs. non- VFX shots, so that the gamut compression is not applied twice. Production Realities \u00b6 Order of Operations \u00b6 The order in which the various operations are applied to an image has a significant impact on the end result. In particular, any scaling will produce a different result depending on whether it is done before or after the RGC , since its removal of negative values can reduce some scaling artifacts. Some applications may give the user detailed control over order of operations, but in others the underlying processes are hidden. This is an important consideration when planning workflows. In compositing in particular, there may be operations (edge despill in keying has been noted) where using the unmodified pixel values gives a preferable result. In these cases it may be necessary for the compositor to have access to both the original and gamut compressed image data in their node tree, choosing between them as necessary. For consistency, the RGC should still be applied at some other suitable point in the composite, such that the final renders delivered to DI still have the gamut compression applied as expected. Since normal practice in VFX is to return images with any pixel not touched by the compositing process unmodified from the original pulls, one might think that the RGC should be inverted for deliverables, as is done with CDL corrections, for example. However, it is better to think of the RGC more like a spill suppression, which is part of the composite, and would not be inverted out at the end. Inverting creates the possibility that elements added during compositing (CGI originally created in ACEScg, for example) which have not had the RGC applied may produce extreme values on inversion. An inverse mode is included in the algorithm, but is provided only for edge cases where it proves unavoidable. Some education of the various stakeholders may be required to establish why inverting is not preferable. Tracking \u00b6 In the long term, the expectation is that application of the RGC will be tracked using AMF (the ACES Metadata File). This will enable selective use of the algorithm, rather than the currently recommended default of \u201calways on\u201d. Since AMF is currently in development by the various software vendors, this will not be practical until AMF is widely implemented. Unless AMF can be relied upon to be correctly read and updated at every stage of the process, it will be of little use \u2013 incorrect metadata is worse that no metadata. The RGC is classed as an LMT (Look Modification Transform). But unlike most LMTs, it is applied first, immediately after the IDT , rather than last, just before the Output Transform. AMF can list multiple LMTs in its specification of the viewing pipeline for a shot, so will include one for the RGC as well as optionally one for a scene/show look. Compositing and grading work will be done between these two LMTs. LMT elements in an AMF include an applied attribute, so a shot which was previously viewed (e.g. on set) with the RGC enabled will include an LMT for the RGC , with the applied attribute set to false . If the shot is then passed through VFX , and the RGC is then baked in, the applied attribute should be set to true in the AMF returned with the shot to finishing. This will enable the finishing system to automatically apply the RGC to original footage, but disable it for shots from VFX . In the short term, manual tracking will be needed. This is the reason for the recommendation to have the RGC always enabled in the viewing pipeline (and therefore baked into any media which includes the Output Transform). A slight complexity is introduced by the requirement to apply the RGC before compositing work, and therefore bake it into any VFX renders. This means it is necessary for anybody working with a shot which has passed through VFX (including both colorists and VFX artists adding a secondary compositing pass) to take account of the fact that the RGC is already baked in, and not apply it a second time. Until AMF automates this process, careful communication, and agreement upon standard practices will be required. Please note that the workflows outlined in this guide are recommendations, but the needs may vary by facility and production. 3D LUT Implementation \u00b6 While it is generally recommended to use full precision CPU/GPU implementations of the ACES RGC transform some use cases may still require a 3D LUT based implementation instead. Examples for this include (but are not limited to): On-set monitoring of live camera feeds Implementations using legacy versions of OpenColorIO (v2.0 or earlier) Other DCC applications that do not yet support ACES v1.3 The two main considerations for a 3D LUT implementation of the ACES RGC are the LUT input color space and the transform precision. LUT Input Color Space: \u00b6 3D LUT input domains are usually in a 0.0 to 1.0 range (or equivalent integer ranges). Since out-of-gamut color samples have component values below zero an appropriate LUT input color space must be used in which all expected color samples map into the 0.0 to 1.0 range. For on-set monitoring, where the input gamut is known and fixed, such an input color space could be the camera\u2019s specific log-encoding (e.g. LogC3/ARRIWideGamut, Log3G10/REDWideGamutRGB). These encodings are optimized for the particular camera model and are expected to map all color samples into the 0.0\u21921.0 domain. Please note that ACEScct does not fulfill this requirement, even if it is available as a camera RAW development target, and is therefore not recommended to be used as an input encoding for a 3D LUT implementation of the RGC . So for visual effects, review or mastering applications that have to account for multiple input gamuts and are not able to rely on a specific camera vendor encoding an analytic implementation is required. LUT Precision: \u00b6 To achieve a reasonable approximation of the ACES RGC transform a 3D LUT implementation should use the highest practical resolution (e.g. 65x65x65) as well as tetrahedral interpolation. However, even with high resolution LUTs, the residual interpolation errors are significant enough to prevent accurate inversion of the transform, especially at the gamut boundaries. Therefore 3D LUT implementations of the RGC should be considered non-invertible. Implementation Guide \u00b6 If you are a software developer or engineer looking for technical implementation guidelines for integrating the ACES Reference Gamut Compression in software, please see our Implementation Guide . Appendix \u00b6 Before and after images, viewed through the Rec. 709 Output Transform @import \"../../stylesheets/sections.css\" Some implementations may also include a parametric version of the ACES gamut compression. If you choose to use this, it falls outside the scope of published ACES workflows, and therefore will need to be tracked manually. At that point it is simply another creative tool in the colorist\u2019s arsenal. \u21a9","title":"Reference Gamut Compression (RGC) User Guide"},{"location":"guides/rgc-user/#aces-reference-gamut-compression-user-guide","text":"","title":"ACES Reference Gamut Compression User Guide"},{"location":"guides/rgc-user/#scope","text":"The purpose of this document is to elaborate on suggested user workflows for on set, dailies, visual effects, and finishing using the ACES Reference Gamut Compression ( RGC ). For detailed technical specifications, please refer to the ACES Gamut Mapping Architecture VWG - Technical Documentation.","title":"Scope"},{"location":"guides/rgc-user/#references","text":"The following standards, specifications, articles, presentations, and texts are referenced in this text: ACES Gamut Mapping Architecture VWG - Technical Documentation Deliverable","title":"References"},{"location":"guides/rgc-user/#introduction","text":"A common complaint from users of ACES has been the artifacts resulting from out of gamut values in source images. These artifacts are most known for appearing in highly saturated, bright LED light sources such as police car lights, stoplights, etc - but also show up frequently in LED sources used to light scenes. In an ACES workflow, these artifacts appear at two stages - first in the conversion from camera raw RGB via an Input Transform ( IDT ) into ACES AP0 - and second in the conversion from ACES AP0 into ACES AP1 (ACEScg and ACEScct). These out of gamut pixel values are problematic when their negative components cause issues in compositing, and may also produce visual artifacts when viewed through an ACES Output Transform. A Look Modification Transform ( LMT ) referred to as the blue light artifact fix was created as a temporary solution, but this solution affected all pixels in the image, rather than just the problem areas. A new solution was needed which preserved colors within a \u201czone of trust\u201d, only altering the most saturated values. The Reference Gamut Compression algorithm published in ACES 1.3 is intended to replace and deprecate the Blue Light Artifact LMT . Various options were investigated, and the working group finally settled on a simple RGB ratio based algorithm which compresses values based on their distance from the neutral axis. This makes no attempt to ascertain the \u201ccorrect\u201d value for a pixel, since the nature of the problem means that these pixels may have no correct color. The algorithm is intended as a technical correction rather than an aesthetic look. It \u201cheals\u201d the problem pixels, to produce new RGB values which are less problematic when used in subsequent compositing or grading operations. Creative modifications are left for the user to apply as necessary downstream of the RGC . The ACES Reference Gamut Compression uses fixed values 1 for the thresholds where compression begins, and for the amount of compression. These values have been calculated such that the colors of the ColorChecker 24 will remain unchanged, and that any colors that are within the encoding gamuts of all the commonly used digital cinema cameras (those with official ACES IDTs) will be brought within AP1, thus ensuring positive ACEScg values. In most workflows, these constants will be invisible to the user, as demonstrated in the screenshots from Resolve 17.4 below - the user has the option to apply the RGC at a project or a clip level. Reference Gamut Compression enabled via Project Settings in DaVinci Resolve 17.4 Reference Gamut Compression individual clip settings in DaVinci Resolve 17.4 In the example below, artifacts such as the magenta solarization seen on the nose of the Okja toy are greatly reduced by application of the RGC . Without the RGC With the RGC applied Though the algorithm itself and application to an image is relatively simple, there are many considerations to discuss for overall workflows for an ACES project, from on set through to finishing.","title":"Introduction"},{"location":"guides/rgc-user/#general-workflow","text":"As visualized in the flowchart above, it is recommended (in the current absence of AMF for tracking) that most productions utilize the gamut compression in every area - from on set all the way to finishing. This means that at this time, for simplicity, the the RGC is \u201calways on\u201d by default in any viewing pipeline. Following the general ACES workflow philosophy, the RGC is only baked in to image data at the appropriate stage in the pipeline - which varies based on the needs of your production, as outlined in the flow chart and explained below.","title":"General Workflow"},{"location":"guides/rgc-user/#on-set","text":"","title":"On Set"},{"location":"guides/rgc-user/#dailies","text":"Use a dailies generation software, such as Colorfront or Resolve, to import the original camera footage, and apply the Reference Gamut Compression as a part of your viewing pipeline for export to desired media.","title":"Dailies"},{"location":"guides/rgc-user/#editorial","text":"Use media supplied from dailies, and back from VFX , to verify media as work progresses. As editorial is largely offline and based on proxy media, the RGC , as viewed on set, should be baked into the files sent to editorial.","title":"Editorial"},{"location":"guides/rgc-user/#vfx","text":"Frame pulls for VFX should NOT have the Reference Gamut Compression baked in. The files should be debayered to AP0. VFX will have the flexibility to apply the RGC wherever is best for their compositing chain. This will often be the first node in the tree, but sometimes operations such as a despill on a bluescreen will need to be performed pre-gamut compression. Sending pulls to VFX in AP0 gives compositors the flexibility to fine tune and control their work. Once applied, the Reference Gamut compression should NOT be inverted before delivery. It is important that the RGC get applied to all WIP QT renders for review and editorial, so as to match dailies.","title":"VFX"},{"location":"guides/rgc-user/#finishing","text":"Finishing software should have the ability to apply the RGC at a project, timeline, or clip level. This should give the colorist flexibility to choose what works best for the project. The RGC should be applied directly after the IDT , ideally before any scaling, grading, or other finishing work. In a pre-conformed timeline, apply the RGC as early as possible. If frames are coming back from VFX , it will be important to track those vs. non- VFX shots, so that the gamut compression is not applied twice.","title":"Finishing"},{"location":"guides/rgc-user/#production-realities","text":"","title":"Production Realities"},{"location":"guides/rgc-user/#order-of-operations","text":"The order in which the various operations are applied to an image has a significant impact on the end result. In particular, any scaling will produce a different result depending on whether it is done before or after the RGC , since its removal of negative values can reduce some scaling artifacts. Some applications may give the user detailed control over order of operations, but in others the underlying processes are hidden. This is an important consideration when planning workflows. In compositing in particular, there may be operations (edge despill in keying has been noted) where using the unmodified pixel values gives a preferable result. In these cases it may be necessary for the compositor to have access to both the original and gamut compressed image data in their node tree, choosing between them as necessary. For consistency, the RGC should still be applied at some other suitable point in the composite, such that the final renders delivered to DI still have the gamut compression applied as expected. Since normal practice in VFX is to return images with any pixel not touched by the compositing process unmodified from the original pulls, one might think that the RGC should be inverted for deliverables, as is done with CDL corrections, for example. However, it is better to think of the RGC more like a spill suppression, which is part of the composite, and would not be inverted out at the end. Inverting creates the possibility that elements added during compositing (CGI originally created in ACEScg, for example) which have not had the RGC applied may produce extreme values on inversion. An inverse mode is included in the algorithm, but is provided only for edge cases where it proves unavoidable. Some education of the various stakeholders may be required to establish why inverting is not preferable.","title":"Order of Operations"},{"location":"guides/rgc-user/#tracking","text":"In the long term, the expectation is that application of the RGC will be tracked using AMF (the ACES Metadata File). This will enable selective use of the algorithm, rather than the currently recommended default of \u201calways on\u201d. Since AMF is currently in development by the various software vendors, this will not be practical until AMF is widely implemented. Unless AMF can be relied upon to be correctly read and updated at every stage of the process, it will be of little use \u2013 incorrect metadata is worse that no metadata. The RGC is classed as an LMT (Look Modification Transform). But unlike most LMTs, it is applied first, immediately after the IDT , rather than last, just before the Output Transform. AMF can list multiple LMTs in its specification of the viewing pipeline for a shot, so will include one for the RGC as well as optionally one for a scene/show look. Compositing and grading work will be done between these two LMTs. LMT elements in an AMF include an applied attribute, so a shot which was previously viewed (e.g. on set) with the RGC enabled will include an LMT for the RGC , with the applied attribute set to false . If the shot is then passed through VFX , and the RGC is then baked in, the applied attribute should be set to true in the AMF returned with the shot to finishing. This will enable the finishing system to automatically apply the RGC to original footage, but disable it for shots from VFX . In the short term, manual tracking will be needed. This is the reason for the recommendation to have the RGC always enabled in the viewing pipeline (and therefore baked into any media which includes the Output Transform). A slight complexity is introduced by the requirement to apply the RGC before compositing work, and therefore bake it into any VFX renders. This means it is necessary for anybody working with a shot which has passed through VFX (including both colorists and VFX artists adding a secondary compositing pass) to take account of the fact that the RGC is already baked in, and not apply it a second time. Until AMF automates this process, careful communication, and agreement upon standard practices will be required. Please note that the workflows outlined in this guide are recommendations, but the needs may vary by facility and production.","title":"Tracking"},{"location":"guides/rgc-user/#3d-lut-implementation","text":"While it is generally recommended to use full precision CPU/GPU implementations of the ACES RGC transform some use cases may still require a 3D LUT based implementation instead. Examples for this include (but are not limited to): On-set monitoring of live camera feeds Implementations using legacy versions of OpenColorIO (v2.0 or earlier) Other DCC applications that do not yet support ACES v1.3 The two main considerations for a 3D LUT implementation of the ACES RGC are the LUT input color space and the transform precision.","title":"3D LUT Implementation"},{"location":"guides/rgc-user/#implementation-guide","text":"If you are a software developer or engineer looking for technical implementation guidelines for integrating the ACES Reference Gamut Compression in software, please see our Implementation Guide .","title":"Implementation Guide"},{"location":"guides/rgc-user/#appendix","text":"Before and after images, viewed through the Rec. 709 Output Transform @import \"../../stylesheets/sections.css\" Some implementations may also include a parametric version of the ACES gamut compression. If you choose to use this, it falls outside the scope of published ACES workflows, and therefore will need to be tracked manually. At that point it is simply another creative tool in the colorist\u2019s arsenal. \u21a9","title":"Appendix"}]}